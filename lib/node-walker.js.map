{"version":3,"sources":["../src/node-walker.js"],"names":["Node","ATTRIBUTE_NODE","CDATA_SECTION_NODE","COMMENT_NODE","DOCUMENT_FRAGMENT_NODE","DOCUMENT_NODE","DOCUMENT_POSITION_CONTAINED_BY","DOCUMENT_POSITION_CONTAINS","DOCUMENT_POSITION_DISCONNECTED","DOCUMENT_POSITION_FOLLOWING","DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC","DOCUMENT_POSITION_PRECEDING","DOCUMENT_TYPE_NODE","ELEMENT_NODE","ENTITY_NODE","ENTITY_REFERENCE_NODE","NOTATION_NODE","PROCESSING_INSTRUCTION_NODE","TEXT_NODE","NodeWalker","domNode","parentNode","start","myStart","richNode","createRichNode","parent","end","type","detectDomNodeType","processTagNode","processTextNode","processOtherNode","childDomNode","processDomNode","nextDomChildren","firstChild","nextChildren","richChildNode","stepInDomNode","length","stepNextDomNode","text","textContent","childDomNodes","childNodes","finishChildSteps","hasChildNodes","nodeType","content","RichNode","walk","node","NW"],"mappings":";;;;;;;;;AAAA;;;;AACA;;;;;;;;;;AAEA,IAAI,CAAEA,IAAN,EAAa;AACX,MAAIA,OAAO,EAAEC,gBAAgB,CAAlB;AACEC,wBAAoB,CADtB;AAEEC,kBAAc,CAFhB;AAGEC,4BAAwB,EAH1B;AAIEC,mBAAe,CAJjB;AAKEC,oCAAgC,EALlC;AAMEC,gCAA4B,CAN9B;AAOEC,oCAAgC,CAPlC;AAQEC,iCAA6B,CAR/B;AASEC,+CAA2C,EAT7C;AAUEC,iCAA6B,CAV/B;AAWEC,wBAAoB,EAXtB;AAYEC,kBAAc,CAZhB;AAaEC,iBAAa,CAbf;AAcEC,2BAAuB,CAdzB;AAeEC,mBAAe,EAfjB;AAgBEC,iCAA6B,CAhB/B;AAiBEC,eAAW,CAjBb,EAAX;AAkBD;;AAED;;;;;;;;IAOMC,U;;;;;;;;AACJ;;;mCAGgBC,O,EAASC,U,EAAwB;AAAA,UAAZC,KAAY,uEAAJ,CAAI;;AAC/C,UAAMC,UAAWF,cAAc,0BAAIA,UAAJ,EAAgB,KAAhB,CAAf,IAA0CC,KAA1D;AACA,UAAME,WAAW,KAAKC,cAAL,CAAoB;AACnCL,iBAASA,OAD0B;AAEnCM,gBAAQL,UAF2B;AAGnCC,eAAOC,OAH4B;AAInCI,aAAKJ,OAJ8B;AAKnCK,cAAM,KAAKC,iBAAL,CAAwBT,OAAxB;AAL6B,OAApB,CAAjB;;AAQA;AACA,UAAI,0BAAII,QAAJ,EAAc,MAAd,MAA0B,KAA9B,EAAqC;AACnC,eAAO,KAAKM,cAAL,CAAqBN,QAArB,CAAP;AACD;AACD;AAHA,WAIK,IAAI,0BAAIA,QAAJ,EAAc,MAAd,MAA0B,MAA9B,EAAsC;AACzC,iBAAO,KAAKO,eAAL,CAAsBP,QAAtB,CAAP;AACD;AACD;AAHK,aAIA;AAAE;AACL,mBAAO,KAAKQ,gBAAL,CAAuBR,QAAvB,CAAP;AACD;AACF;;AAED;;;;;;kCAGeA,Q,EAAUS,Y,EAAe;AACtC,aAAO,KAAKC,cAAL,CAAqBD,YAArB,EAAmCT,QAAnC,CAAP;AACD;;AAED;;;;;;oCAGiBA,Q,EAAWW,e,EAAkB;AAC5C;AAD4C,sCAEJA,eAFI;AAAA,UAEpCC,UAFoC;AAAA,UAErBC,YAFqB;;AAG5C,UAAMC,gBAAgB,KAAKC,aAAL,CAAoBf,QAApB,EAA8BY,UAA9B,CAAtB;AACA,gCAAKZ,QAAL,EAAe,KAAf,EAAsB,0BAAIc,aAAJ,EAAmB,KAAnB,CAAtB;AACA,UAAKD,aAAaG,MAAlB,EACE,QAASF,aAAT,4BAA2B,KAAKG,eAAL,CAAsBjB,QAAtB,EAAgCa,YAAhC,CAA3B,GADF,KAGE,OAAO,CAAEC,aAAF,CAAP;AACH;;AAED;;;AAGA;;;;qCACkBd,Q,EAAW;AAC3B;AACD;;AAED;;;;;;oCAGiBA,Q,EAAW;AAC1B,UAAMJ,UAAU,0BAAII,QAAJ,EAAc,SAAd,CAAhB;AACA,UAAMF,QAAQ,0BAAIE,QAAJ,EAAc,OAAd,CAAd;AACA,UAAIkB,OAAOtB,QAAQuB,WAAnB;AACA,gCAAInB,QAAJ,EAAc,MAAd,EAAsBkB,IAAtB;AACA,gCAAIlB,QAAJ,EAAc,KAAd,EAAqBF,QAAQoB,KAAKF,MAAlC;AACA,aAAOhB,QAAP;AACD;AACD;;;;;;mCAGgBA,Q,EAAW;AACzB,gCAAIA,QAAJ,EAAc,KAAd,EAAqB,0BAAIA,QAAJ,EAAc,OAAd,CAArB,EADyB,CACqB;AAC9C,UAAMJ,UAAU,0BAAII,QAAJ,EAAc,SAAd,CAAhB;AACA,UAAMoB,gBAAgBxB,QAAQyB,UAA9B;AACA,gCAAIrB,QAAJ,EAAc,UAAd,EACI,KAAKiB,eAAL,CAAsBjB,QAAtB,EAAgCoB,aAAhC,CADJ;AAEA,WAAKE,gBAAL,CAAuBtB,QAAvB;AACA,aAAOA,QAAP;AACD;AACD;;;;;;qCAGkBA,Q,EAAW;AAC3B,UAAMF,QAAQ,0BAAIE,QAAJ,EAAc,OAAd,CAAd;AACA,gCAAIA,QAAJ,EAAc,KAAd,EAAqBF,KAArB;AACA,aAAOE,QAAP;AACD;;AAED;;;;;;sCAGmBJ,O,EAAU;AAC3B,UAAIA,QAAQ2B,aAAR,IAAyB3B,QAAQ2B,aAAR,EAA7B,EAAsD;AACpD,eAAO,KAAP;AACD,OAFD,MAGK,IAAI3B,QAAQ4B,QAAR,IAAoBhD,KAAKG,YAA7B,EAA2C;AAC9C,eAAO,MAAP;AACD,OAFI,MAGA;AACH,eAAO,OAAP;AACD;AACF;;AAED;;;;;;;;;mCAMgB8C,O,EAAU;AACxB,aAAO,IAAIC,kBAAJ,CAAcD,OAAd,CAAP;AACD;;;;;;AAGH,SAASE,IAAT,CAAcC,IAAd,EAAoB;AAClB,MAAMC,KAAK,IAAIlC,UAAJ,EAAX;AACA,SAAOkC,GAAGnB,cAAH,CAAmBkB,IAAnB,CAAP;AACD;;kBAEcjC,U;QACNgC,I,GAAAA,I","file":"node-walker.js","sourcesContent":["import RichNode from './rich-node';\nimport {get, set} from './ember-object-mock';\n\nif( ! Node ) {\n  var Node = { ATTRIBUTE_NODE: 2,\n               CDATA_SECTION_NODE: 4,\n               COMMENT_NODE: 8,\n               DOCUMENT_FRAGMENT_NODE: 11,\n               DOCUMENT_NODE: 9,\n               DOCUMENT_POSITION_CONTAINED_BY: 16,\n               DOCUMENT_POSITION_CONTAINS: 8,\n               DOCUMENT_POSITION_DISCONNECTED: 1,\n               DOCUMENT_POSITION_FOLLOWING: 4,\n               DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32,\n               DOCUMENT_POSITION_PRECEDING: 2,\n               DOCUMENT_TYPE_NODE: 10,\n               ELEMENT_NODE: 1,\n               ENTITY_NODE: 6,\n               ENTITY_REFERENCE_NODE: 5,\n               NOTATION_NODE: 12,\n               PROCESSING_INSTRUCTION_NODE: 7,\n               TEXT_NODE: 3 };\n}\n\n/**\n * DOM tree walker producing RichNodes\n *\n * @module editor-core\n * @class NodeWalker\n * @constructor\n */\nclass NodeWalker {\n  /**\n   * Processes a single dom node.\n   */\n  processDomNode( domNode, parentNode, start = 0 ) {\n    const myStart = (parentNode && get(parentNode, 'end')) || start;\n    const richNode = this.createRichNode({\n      domNode: domNode,\n      parent: parentNode,\n      start: myStart,\n      end: myStart,\n      type: this.detectDomNodeType( domNode )\n    });\n\n    // For tags, recursively analyse the children\n    if (get(richNode, 'type') === 'tag') {\n      return this.processTagNode( richNode );\n    }\n    // For text nodes, add the content and update the index\n    else if (get(richNode, 'type') === 'text') {\n      return this.processTextNode( richNode );\n    }\n    // For comment nodes, set update the index\n    else { // if (get(richNode, 'type') == 'other')\n      return this.processOtherNode( richNode );\n    }\n  }\n\n  /**\n   * Called when stepping into a child Dom node\n   */\n  stepInDomNode( richNode, childDomNode ) {\n    return this.processDomNode( childDomNode, richNode );\n  }\n\n  /**\n   * Steps from one (or no) child node to the next.\n   */\n  stepNextDomNode( richNode , nextDomChildren ) {\n    // what if we have no children?  this is broken\n    const [ firstChild, ...nextChildren ] = nextDomChildren;\n    const richChildNode = this.stepInDomNode( richNode, firstChild );\n    set( richNode, 'end', get(richChildNode, 'end') );\n    if ( nextChildren.length )\n      return [ richChildNode, ...this.stepNextDomNode( richNode, nextChildren ) ];\n    else\n      return [ richChildNode ];\n  }\n\n  /**\n   * Called when finishing the processing of all the child nodes.\n   */\n  /*eslint no-unused-vars: [\"error\", { \"args\": \"none\" }]*/\n  finishChildSteps( richNode ) {\n    return;\n  }\n\n  /**\n   * Processes a single rich text node\n   */\n  processTextNode( richNode ) {\n    const domNode = get(richNode, 'domNode');\n    const start = get(richNode, 'start');\n    let text = domNode.textContent;\n    set(richNode, 'text', text);\n    set(richNode, 'end', start + text.length);\n    return richNode;\n  }\n  /**\n   * Processes a single rich tag\n   */\n  processTagNode( richNode ) {\n    set(richNode, 'end', get(richNode, 'start')); // end will be updated during run\n    const domNode = get(richNode, 'domNode');\n    const childDomNodes = domNode.childNodes;\n    set(richNode, 'children',\n        this.stepNextDomNode( richNode, childDomNodes ));\n    this.finishChildSteps( richNode );\n    return richNode;\n  }\n  /**\n   * Processes a single comment node\n   */\n  processOtherNode( richNode ) {\n    const start = get(richNode, 'start');\n    set(richNode, 'end', start);\n    return richNode;\n  }\n\n  /**\n   * Detects the type of a DOM node\n   */\n  detectDomNodeType( domNode ) {\n    if (domNode.hasChildNodes && domNode.hasChildNodes()) {\n      return 'tag';\n    }\n    else if (domNode.nodeType != Node.COMMENT_NODE) {\n      return 'text';\n    }\n    else {\n      return 'other';\n    }\n  }\n\n  /**\n   * Creates a rich node.\n   *\n   * You can override this method in order to add content to\n   * the rich text nodes.\n   */\n  createRichNode( content ) {\n    return new RichNode( content );\n  }\n}\n\nfunction walk(node) {\n  const NW = new NodeWalker();\n  return NW.processDomNode( node );\n}\n\nexport default NodeWalker;\nexport { walk };\n"]}